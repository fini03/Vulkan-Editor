const std::string m_MODEL_PATH = "{{ modelPath }}";
const std::string m_TEXTURE_PATH = "{{ texturePath }}";

class VulkanTutorial {
	public:
    void loadModel( Geometry& geometry, const std::string& MODEL_PATH) {
        tinyobj::attrib_t attrib;
        std::vector<tinyobj::shape_t> shapes;
        std::vector<tinyobj::material_t> materials;
        std::string warn, err;

        if (!tinyobj::LoadObj(&attrib, &shapes, &materials, &warn, &err, MODEL_PATH.c_str())) {
            throw std::runtime_error(warn + err);
        }

        std::unordered_map<Vertex, uint32_t> uniqueVertices{};

        for (const auto& shape : shapes) {
            for (const auto& index : shape.mesh.indices) {
                Vertex vertex{};

                vertex.pos = {
                    attrib.vertices[3 * index.vertex_index + 0],
                    attrib.vertices[3 * index.vertex_index + 1],
                    attrib.vertices[3 * index.vertex_index + 2]
                };

                vertex.texCoord = {
                    attrib.texcoords[2 * index.texcoord_index + 0],
                    1.0f - attrib.texcoords[2 * index.texcoord_index + 1]
                };

                vertex.color = {1.0f, 1.0f, 1.0f};

                if (uniqueVertices.count(vertex) == 0) {
                    uniqueVertices[vertex] = static_cast<uint32_t>(geometry.m_vertices.size());
                    geometry.m_vertices.push_back(vertex);
                }

                geometry.m_indices.push_back(uniqueVertices[vertex]);
            }
        }
    }

    void createObject(
        VkPhysicalDevice physicalDevice,
        VkDevice device,
        VmaAllocator vmaAllocator,
        VkQueue graphicsQueue,
        VkCommandPool commandPool,
        VkDescriptorPool descriptorPool,
        VkDescriptorSetLayout descriptorSetLayout,
        glm::mat4&& model,
        std::string modelPath,
        std::string texturePath,
        std::vector<Object>& objects
    ) {
        Object object{model};
        createTextureImage(physicalDevice, device, vmaAllocator, graphicsQueue, commandPool, texturePath, object.m_texture);
        createTextureImageView(device, object.m_texture);
        createTextureSampler(physicalDevice, device, object.m_texture);
        loadModel(object.m_geometry, modelPath);
        createVertexBuffer(physicalDevice, device, vmaAllocator, graphicsQueue, commandPool, object.m_geometry);
        createIndexBuffer(physicalDevice, device, vmaAllocator, graphicsQueue, commandPool, object.m_geometry);
        createUniformBuffers(physicalDevice, device, vmaAllocator, object.m_uniformBuffers);
        createDescriptorSets(device, object.m_texture, descriptorSetLayout, object.m_uniformBuffers, descriptorPool, object.m_descriptorSets);
        objects.push_back(object);
    }
