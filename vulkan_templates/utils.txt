    VkCommandBuffer beginSingleTimeCommands(VkDevice device, VkCommandPool commandPool) {
        VkCommandBufferAllocateInfo allocInfo{};
        allocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
        allocInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;
        allocInfo.commandPool = commandPool;
        allocInfo.commandBufferCount = 1;

        VkCommandBuffer commandBuffer;
        vkAllocateCommandBuffers(device, &allocInfo, &commandBuffer);

        VkCommandBufferBeginInfo beginInfo{};
        beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
        beginInfo.flags = VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;

        vkBeginCommandBuffer(commandBuffer, &beginInfo);

        return commandBuffer;
    }

    void endSingleTimeCommands(VkDevice device, VkQueue graphicsQueue, VkCommandPool commandPool, VkCommandBuffer commandBuffer) {
        vkEndCommandBuffer(commandBuffer);

        VkSubmitInfo submitInfo{};
        submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
        submitInfo.commandBufferCount = 1;
        submitInfo.pCommandBuffers = &commandBuffer;

        vkQueueSubmit(graphicsQueue, 1, &submitInfo, VK_NULL_HANDLE);
        vkQueueWaitIdle(graphicsQueue);

        vkFreeCommandBuffers(device, commandPool, 1, &commandBuffer);
    }

	void recordCommandBuffer(VkCommandBuffer commandBuffer, uint32_t imageIndex
	    , SwapChain& swapChain, VkRenderPass renderPass, Pipeline& graphicsPipeline
	    , std::vector<Object>& objects //Geometry& geometry, std::vector<VkDescriptorSet>& descriptorSets
		, uint32_t currentFrame) {

	    VkCommandBufferBeginInfo beginInfo{};
	    beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;

	    if (vkBeginCommandBuffer(commandBuffer, &beginInfo) != VK_SUCCESS) {
	        throw std::runtime_error("failed to begin recording command buffer!");
	    }

	    VkRenderPassBeginInfo renderPassInfo{};
	    renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
	    renderPassInfo.renderPass = renderPass;
	    renderPassInfo.framebuffer = swapChain.m_swapChainFramebuffers[imageIndex];
	    renderPassInfo.renderArea.offset = {0, 0};
	    renderPassInfo.renderArea.extent = swapChain.m_swapChainExtent;

	    std::array<VkClearValue, 2> clearValues{};
	    clearValues[0].color = {0.4f, 0.5f, 6.0f, 1.0f};
	    clearValues[1].depthStencil = {1.0f, 0};

	    renderPassInfo.clearValueCount = static_cast<uint32_t>(clearValues.size());
	    renderPassInfo.pClearValues = clearValues.data();

	    vkCmdBeginRenderPass(commandBuffer, &renderPassInfo, VK_SUBPASS_CONTENTS_INLINE);

	        vkCmdBindPipeline(commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, graphicsPipeline.m_pipeline);

	        VkViewport viewport{};
	        viewport.x = 0.0f;
	        viewport.y = 0.0f;
	        viewport.width = (float) swapChain.m_swapChainExtent.width;
	        viewport.height = (float) swapChain.m_swapChainExtent.height;
	        viewport.minDepth = 0.0f;
	        viewport.maxDepth = 1.0f;
	        vkCmdSetViewport(commandBuffer, 0, 1, &viewport);

	        VkRect2D scissor{};
	        scissor.offset = {0, 0};
	        scissor.extent = swapChain.m_swapChainExtent;
	        vkCmdSetScissor(commandBuffer, 0, 1, &scissor);

			for( auto& object : objects ) {
	            VkBuffer vertexBuffers[] = {object.m_geometry.m_vertexBuffer};
	            VkDeviceSize offsets[] = {0};
	            vkCmdBindVertexBuffers(commandBuffer, 0, 1, vertexBuffers, offsets);

	            vkCmdBindIndexBuffer(commandBuffer, object.m_geometry.m_indexBuffer, 0, VK_INDEX_TYPE_UINT32);

	            vkCmdBindDescriptorSets(commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, graphicsPipeline.m_pipelineLayout
	                , 0, 1, &object.m_descriptorSets[currentFrame], 0, nullptr);

	            vkCmdDrawIndexed(commandBuffer, static_cast<uint32_t>(object.m_geometry.m_indices.size()), 1, 0, 0, 0);
			}

	        //----------------------------------------------------------------------------------
	        ImGui::Render();

	        ImGui_ImplVulkan_RenderDrawData(ImGui::GetDrawData(), commandBuffer);
	        //----------------------------------------------------------------------------------


	    vkCmdEndRenderPass(commandBuffer);

	    if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
	        throw std::runtime_error("failed to record command buffer!");
	    }
	}

	void createCommandPool(VkSurfaceKHR surface, VkPhysicalDevice physicalDevice, VkDevice device, VkCommandPool& commandPool) {
	    QueueFamilyIndices queueFamilyIndices = findQueueFamilies(physicalDevice, surface);

	    VkCommandPoolCreateInfo poolInfo{};
	    poolInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
	    poolInfo.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
	    poolInfo.queueFamilyIndex = queueFamilyIndices.graphicsFamily.value();

	    if (vkCreateCommandPool(device, &poolInfo, nullptr, &commandPool) != VK_SUCCESS) {
	        throw std::runtime_error("failed to create graphics command pool!");
	    }
	}

	void createDescriptorPool(VkDevice device, VkDescriptorPool& descriptorPool) {
	    /*std::array<VkDescriptorPoolSize, 2> poolSizes{};
	    poolSizes[0].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	    poolSizes[0].descriptorCount = static_cast<uint32_t>(MAX_FRAMES_IN_FLIGHT);
	    poolSizes[1].type = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
	    poolSizes[1].descriptorCount = static_cast<uint32_t>(MAX_FRAMES_IN_FLIGHT);

	    VkDescriptorPoolCreateInfo poolInfo{};
	    poolInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
	    poolInfo.poolSizeCount = static_cast<uint32_t>(poolSizes.size());
	    poolInfo.pPoolSizes = poolSizes.data();
	    poolInfo.maxSets = static_cast<uint32_t>(MAX_FRAMES_IN_FLIGHT);

	    if (vkCreateDescriptorPool(device, &poolInfo, nullptr, &descriptorPool) != VK_SUCCESS) {
	        throw std::runtime_error("failed to create descriptor pool!");
	    }*/

	    VkDescriptorPoolSize pool_sizes[] =
	    {
	        { VK_DESCRIPTOR_TYPE_SAMPLER, 1000 },
	        { VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, 1000 },
	        { VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, 1000 },
	        { VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, 1000 },
	        { VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, 1000 },
	        { VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, 1000 },
	        { VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1000 },
	        { VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, 1000 },
	        { VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, 1000 },
	        { VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, 1000 },
	        { VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, 1000 }
	    };

	    VkDescriptorPoolCreateInfo pool_info = {};
	    pool_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
	    pool_info.flags = VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT;
	    pool_info.maxSets = 1000;
	    pool_info.poolSizeCount = std::size(pool_sizes);
	    pool_info.pPoolSizes = pool_sizes;

	    VkDescriptorPool imguiPool;
	    vkCreateDescriptorPool(device, &pool_info, nullptr, &descriptorPool);
	}

	void createCommandBuffers(VkDevice device, VkCommandPool commandPool, std::vector<VkCommandBuffer>& commandBuffers) {
	    commandBuffers.resize(MAX_FRAMES_IN_FLIGHT);

	    VkCommandBufferAllocateInfo allocInfo{};
	    allocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
	    allocInfo.commandPool = commandPool;
	    allocInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;
	    allocInfo.commandBufferCount = (uint32_t) commandBuffers.size();

	    if (vkAllocateCommandBuffers(device, &allocInfo, commandBuffers.data()) != VK_SUCCESS) {
	        throw std::runtime_error("failed to allocate command buffers!");
	    }
	}

	void setupImgui(
	    VkInstance instance,
	    VkPhysicalDevice physicalDevice,
	    QueueFamilyIndices queueFamilies,
	    VkDevice device,
	    VkQueue graphicsQueue,
	    VkCommandPool commandPool,
	    VkDescriptorPool descriptorPool,
	    VkRenderPass renderPass
	) {
	    // Setup Dear ImGui context
	    IMGUI_CHECKVERSION();
	    ImGui::CreateContext();
	    ImGuiIO& io = ImGui::GetIO();
	    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
	    io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
	    //io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;         // IF using Docking Branch

	    // Setup Platform/Renderer backends
	    ImGui_ImplSDL2_InitForVulkan(m_sdlWindow);

	    ImGui_ImplVulkan_InitInfo init_info = {};
	    init_info.Instance = instance;
	    init_info.PhysicalDevice = physicalDevice;
	    init_info.Device = device;
	    init_info.QueueFamily = queueFamilies.graphicsFamily.value();
	    init_info.Queue = graphicsQueue;
	    init_info.PipelineCache = VK_NULL_HANDLE;
	    init_info.DescriptorPool = descriptorPool;
	    init_info.RenderPass = renderPass;
	    init_info.Subpass = 0;
	    init_info.MinImageCount = 3;
	    init_info.ImageCount = 3;
	    init_info.MSAASamples = VK_SAMPLE_COUNT_1_BIT;
	    init_info.Allocator = nullptr;
	    init_info.CheckVkResultFn = nullptr;
	    ImGui_ImplVulkan_Init(&init_info);
	    // (this gets a bit more complicated, see example app for full reference)
	    //ImGui_ImplVulkan_CreateFontsTexture(YOUR_COMMAND_BUFFER);
	    // (your code submit a queue)
	    //ImGui_ImplVulkan_DestroyFontUploadObjects();
	}
