	QueueFamilyIndices findQueueFamilies(VkPhysicalDevice device, VkSurfaceKHR surface) {
	    QueueFamilyIndices indices;

	    uint32_t queueFamilyCount = 0;
	    vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, nullptr);

	    std::vector<VkQueueFamilyProperties> queueFamilies(queueFamilyCount);
	    vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, queueFamilies.data());

	    int i = 0;
	    for (const auto& queueFamily : queueFamilies) {
	        if (queueFamily.queueFlags & VK_QUEUE_GRAPHICS_BIT) {
	            indices.graphicsFamily = i;
	        }

	        VkBool32 presentSupport = false;
	        vkGetPhysicalDeviceSurfaceSupportKHR(device, i, surface, &presentSupport);

	        if (presentSupport) {
	            indices.presentFamily = i;
	        }

	        if (indices.isComplete()) {
	            break;
	        }

	        i++;
	    }

	    return indices;
	}

	bool checkDeviceExtensionSupport(VkPhysicalDevice device, const std::vector<const char*>& deviceExtensions) {
	    uint32_t extensionCount;
	    vkEnumerateDeviceExtensionProperties(device, nullptr, &extensionCount, nullptr);

	    std::vector<VkExtensionProperties> availableExtensions(extensionCount);
	    vkEnumerateDeviceExtensionProperties(device, nullptr, &extensionCount, availableExtensions.data());

	    std::set<std::string> requiredExtensions(deviceExtensions.begin(), deviceExtensions.end());

	    for (const auto& extension : availableExtensions) {
	        requiredExtensions.erase(extension.extensionName);
	    }

	    return requiredExtensions.empty();
	}

	bool isDeviceSuitable(VkPhysicalDevice device, const std::vector<const char*>& deviceExtensions, VkSurfaceKHR surface) {
	    QueueFamilyIndices indices = findQueueFamilies(device, surface);

	    bool extensionsSupported = checkDeviceExtensionSupport(device, deviceExtensions);

	    bool swapChainAdequate = false;
	    if (extensionsSupported) {
	        SwapChainSupportDetails swapChainSupport = querySwapChainSupport(device, surface);
	        swapChainAdequate = !swapChainSupport.formats.empty() && !swapChainSupport.presentModes.empty();
	    }

	    VkPhysicalDeviceFeatures supportedFeatures;
	    vkGetPhysicalDeviceFeatures(device, &supportedFeatures);

	    return indices.isComplete() && extensionsSupported && swapChainAdequate  && supportedFeatures.samplerAnisotropy;
	}

	void pickPhysicalDevice(VkInstance instance, const std::vector<const char*>& deviceExtensions, VkSurfaceKHR surface, VkPhysicalDevice& physicalDevice) {
	    uint32_t deviceCount = 0;
	    vkEnumeratePhysicalDevices(instance, &deviceCount, nullptr);

	    if (deviceCount == 0) {
	        throw std::runtime_error("failed to find GPUs with Vulkan support!");
	    }

	    std::vector<VkPhysicalDevice> devices(deviceCount);
	    vkEnumeratePhysicalDevices(instance, &deviceCount, devices.data());

	    for (const auto& device : devices) {
	        VkPhysicalDeviceProperties2 deviceProperties2{};
	        deviceProperties2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
	        vkGetPhysicalDeviceProperties2(device, &deviceProperties2);

	        if (deviceProperties2.properties.deviceType == VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU
	            && isDeviceSuitable(device, deviceExtensions, surface)) {

	            physicalDevice = device;
	            break;
	        }
	    }

	    if (physicalDevice == VK_NULL_HANDLE) {
	        for (const auto& device : devices) {
	            if (isDeviceSuitable(device, deviceExtensions, surface)) {
	                physicalDevice = device;
	                break;
	            }
	        }
	    }

	    if (physicalDevice == VK_NULL_HANDLE) {
	        throw std::runtime_error("failed to find a suitable GPU!");
	    }
	}
