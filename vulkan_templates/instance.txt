	VkResult CreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pDebugMessenger) {

	    auto func = (PFN_vkCreateDebugUtilsMessengerEXT) vkGetInstanceProcAddr(instance, "vkCreateDebugUtilsMessengerEXT");
	    if (func != nullptr) {
	        return func(instance, pCreateInfo, pAllocator, pDebugMessenger);
	    } else {
	        return VK_ERROR_EXTENSION_NOT_PRESENT;
	    }
	}

	void DestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT debugMessenger, const VkAllocationCallbacks* pAllocator) {
	    auto func = (PFN_vkDestroyDebugUtilsMessengerEXT) vkGetInstanceProcAddr(instance, "vkDestroyDebugUtilsMessengerEXT");
	    if (func != nullptr) {
	        func(instance, debugMessenger, pAllocator);
	    }
	}

	static VKAPI_ATTR VkBool32 VKAPI_CALL debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageType, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData) {
	    std::cerr << "validation layer: " << pCallbackData->pMessage << std::endl;

	    return VK_FALSE;
	}

	void populateDebugMessengerCreateInfo(VkDebugUtilsMessengerCreateInfoEXT& createInfo) {
	    createInfo = {};
	    createInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
	    createInfo.messageSeverity = VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT
	        | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
	    createInfo.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT
	        | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
	    createInfo.pfnUserCallback = debugCallback;
	}

	void setupDebugMessenger(VkInstance instance) {
	    if (!enableValidationLayers) return;

	    VkDebugUtilsMessengerCreateInfoEXT createInfo;
	    populateDebugMessengerCreateInfo(createInfo);

	    if (CreateDebugUtilsMessengerEXT(instance, &createInfo, nullptr, &m_debugMessenger) != VK_SUCCESS) {
	        throw std::runtime_error("failed to set up debug messenger!");
	    }
	}

	std::vector<const char*> getRequiredExtensions() {
	    uint32_t extensions_count = 0;
	    std::vector<const char*> extensions;
	    SDL_Vulkan_GetInstanceExtensions(m_sdlWindow, &extensions_count, nullptr);
	    extensions.resize(extensions_count);
	    SDL_Vulkan_GetInstanceExtensions(m_sdlWindow, &extensions_count, extensions.data());
	    if (enableValidationLayers) {
	        extensions.push_back(VK_EXT_DEBUG_UTILS_EXTENSION_NAME);
	    }
	    #ifdef __APPLE__
	    extensions.push_back("VK_MVK_macos_surface");
	    // The next line is only required when using API_VERSION_1_0
	    // extensions.push_back("VK_KHR_get_physical_device_properties2");
	    extensions.push_back("VK_KHR_portability_enumeration");
	    #endif

	    return extensions;
	}

	bool checkValidationLayerSupport(const std::vector<const char*>& validationLayers) {
	    uint32_t layerCount;
	    vkEnumerateInstanceLayerProperties(&layerCount, nullptr);

	    std::vector<VkLayerProperties> availableLayers(layerCount);
	    vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());

	    for (const char* layerName : validationLayers) {
	        bool layerFound = false;

	        for (const auto& layerProperties : availableLayers) {
	            if (strcmp(layerName, layerProperties.layerName) == 0) {
	                layerFound = true;
	                break;
	            }
	        }

	        if (!layerFound) {
	            return false;
	        }
	    }

	    return true;
	}

	void createInstance(VkInstance *instance, const std::vector<const char*>& validationLayers) {
	    if (enableValidationLayers && !checkValidationLayerSupport( validationLayers)) {
	        throw std::runtime_error("validation layers requested, but not available!");
	    }

	    VkApplicationInfo appInfo{};
	    appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
	    appInfo.pApplicationName = "Hello Triangle";
	    appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
	    appInfo.pEngineName = "Tutorial";
	    appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
	    #ifdef __APPLE__
	    appInfo.apiVersion = VK_API_VERSION_1_2;
	    #else
	    appInfo.apiVersion = VK_API_VERSION_1_3;
	    #endif

	    VkInstanceCreateInfo createInfo{};
	    createInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
	    #ifdef __APPLE__
	    createInfo.flags = VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR,
	    #endif
	    createInfo.pApplicationInfo = &appInfo;

	    auto extensions = getRequiredExtensions();
	    createInfo.enabledExtensionCount = static_cast<uint32_t>(extensions.size());
	    createInfo.ppEnabledExtensionNames = extensions.data();

	    VkDebugUtilsMessengerCreateInfoEXT debugCreateInfo{};
	    if (enableValidationLayers) {
	        createInfo.enabledLayerCount = static_cast<uint32_t>(validationLayers.size());
	        createInfo.ppEnabledLayerNames = validationLayers.data();

	        populateDebugMessengerCreateInfo(debugCreateInfo);
	        createInfo.pNext = (VkDebugUtilsMessengerCreateInfoEXT*) &debugCreateInfo;
	    } else {
	        createInfo.enabledLayerCount = 0;

	        createInfo.pNext = nullptr;
	    }

	    if (vkCreateInstance(&createInfo, nullptr, instance) != VK_SUCCESS) {
	        throw std::runtime_error("failed to create instance!");
	    }
	}

	{{ application }}
	{{ utils }}
