	    void createUniformBuffers(VkPhysicalDevice physicalDevice, VkDevice device, VmaAllocator& vmaAllocator, UniformBuffers &uniformBuffers) {
        VkDeviceSize bufferSize = sizeof(UniformBufferObject);

        uniformBuffers.m_uniformBuffers.resize(MAX_FRAMES_IN_FLIGHT);
        uniformBuffers.m_uniformBuffersAllocation.resize(MAX_FRAMES_IN_FLIGHT);
        uniformBuffers.m_uniformBuffersMapped.resize(MAX_FRAMES_IN_FLIGHT);

        for (size_t i = 0; i < MAX_FRAMES_IN_FLIGHT; i++) {
            VmaAllocationInfo allocInfo;
            createBuffer(physicalDevice, device, vmaAllocator, bufferSize, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT
                , VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT
                , VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT | VMA_ALLOCATION_CREATE_MAPPED_BIT
                , uniformBuffers.m_uniformBuffers[i]
                , uniformBuffers.m_uniformBuffersAllocation[i], &allocInfo);

            uniformBuffers.m_uniformBuffersMapped[i] = allocInfo.pMappedData;
        }
    }

    	void createDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout& descriptorSetLayout) {
	    VkDescriptorSetLayoutBinding uboLayoutBinding{};
	    uboLayoutBinding.binding = 0;
	    uboLayoutBinding.descriptorCount = 1;
	    uboLayoutBinding.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	    uboLayoutBinding.pImmutableSamplers = nullptr;
	    uboLayoutBinding.stageFlags = VK_SHADER_STAGE_VERTEX_BIT;

	    VkDescriptorSetLayoutBinding samplerLayoutBinding{};
	    samplerLayoutBinding.binding = 1;
	    samplerLayoutBinding.descriptorCount = 1;
	    samplerLayoutBinding.descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
	    samplerLayoutBinding.pImmutableSamplers = nullptr;
	    samplerLayoutBinding.stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT;

	    std::array<VkDescriptorSetLayoutBinding, 2> bindings = {uboLayoutBinding, samplerLayoutBinding};
	    VkDescriptorSetLayoutCreateInfo layoutInfo{};
	    layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
	    layoutInfo.bindingCount = static_cast<uint32_t>(bindings.size());
	    layoutInfo.pBindings = bindings.data();

	    if (vkCreateDescriptorSetLayout(device, &layoutInfo, nullptr, &descriptorSetLayout) != VK_SUCCESS) {
	        throw std::runtime_error("failed to create descriptor set layout!");
	    }
	}

    void createDescriptorSets(VkDevice device, Texture& texture, VkDescriptorSetLayout descriptorSetLayout, UniformBuffers& uniformBuffers, VkDescriptorPool descriptorPool, std::vector<VkDescriptorSet>& descriptorSets) {
        std::vector<VkDescriptorSetLayout> layouts(MAX_FRAMES_IN_FLIGHT, descriptorSetLayout);
        VkDescriptorSetAllocateInfo allocInfo{};
        allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
        allocInfo.descriptorPool = descriptorPool;
        allocInfo.descriptorSetCount = static_cast<uint32_t>(MAX_FRAMES_IN_FLIGHT);
        allocInfo.pSetLayouts = layouts.data();

        descriptorSets.resize(MAX_FRAMES_IN_FLIGHT);
        if (vkAllocateDescriptorSets(device, &allocInfo, descriptorSets.data()) != VK_SUCCESS) {
            throw std::runtime_error("failed to allocate descriptor sets!");
        }

        for (size_t i = 0; i < MAX_FRAMES_IN_FLIGHT; i++) {
            VkDescriptorBufferInfo bufferInfo{};
            bufferInfo.buffer = uniformBuffers.m_uniformBuffers[i];
            bufferInfo.offset = 0;
            bufferInfo.range = sizeof(UniformBufferObject);

            VkDescriptorImageInfo imageInfo{};
            imageInfo.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
            imageInfo.imageView = texture.m_textureImageView;
            imageInfo.sampler = texture.m_textureSampler;

            std::array<VkWriteDescriptorSet, 2> descriptorWrites{};

            descriptorWrites[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
            descriptorWrites[0].dstSet = descriptorSets[i];
            descriptorWrites[0].dstBinding = 0;
            descriptorWrites[0].dstArrayElement = 0;
            descriptorWrites[0].descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
            descriptorWrites[0].descriptorCount = 1;
            descriptorWrites[0].pBufferInfo = &bufferInfo;

            descriptorWrites[1].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
            descriptorWrites[1].dstSet = descriptorSets[i];
            descriptorWrites[1].dstBinding = 1;
            descriptorWrites[1].dstArrayElement = 0;
            descriptorWrites[1].descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
            descriptorWrites[1].descriptorCount = 1;
            descriptorWrites[1].pImageInfo = &imageInfo;

            vkUpdateDescriptorSets(device, static_cast<uint32_t>(descriptorWrites.size()), descriptorWrites.data(), 0, nullptr);
        }
    }

	static std::vector<char> readFile(const std::string& filename) {
	    std::ifstream file(filename, std::ios::ate | std::ios::binary);

	    if (!file.is_open()) {
	        throw std::runtime_error("failed to open file!");
	    }

	    size_t fileSize = (size_t) file.tellg();
	    std::vector<char> buffer(fileSize);

	    file.seekg(0);
	    file.read(buffer.data(), fileSize);

	    file.close();

	    return buffer;
	}

	VkShaderModule createShaderModule(VkDevice device, const std::vector<char>& code) {
	    VkShaderModuleCreateInfo createInfo{};
	    createInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
	    createInfo.codeSize = code.size();
	    createInfo.pCode = reinterpret_cast<const uint32_t*>(code.data());

	    VkShaderModule shaderModule;
	    if (vkCreateShaderModule(device, &createInfo, nullptr, &shaderModule) != VK_SUCCESS) {
	        throw std::runtime_error("failed to create shader module!");
	    }

	    return shaderModule;
	}

	void createGraphicsPipeline(VkDevice device, VkRenderPass renderPass, VkDescriptorSetLayout descriptorSetLayout, Pipeline& graphicsPipeline) {
	    auto vertShaderCode = readFile("{{ vertexShaderPath }}");
	    auto fragShaderCode = readFile("{{ fragmentShaderPath }}");

	    VkShaderModule vertShaderModule = createShaderModule(device, vertShaderCode);
	    VkShaderModule fragShaderModule = createShaderModule(device, fragShaderCode);

	    VkPipelineShaderStageCreateInfo vertShaderStageInfo{};
	    vertShaderStageInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
	    vertShaderStageInfo.stage = VK_SHADER_STAGE_VERTEX_BIT;
	    vertShaderStageInfo.module = vertShaderModule;
	    vertShaderStageInfo.pName = "{{ vertexEntryName }}";

	    VkPipelineShaderStageCreateInfo fragShaderStageInfo{};
	    fragShaderStageInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
	    fragShaderStageInfo.stage = VK_SHADER_STAGE_FRAGMENT_BIT;
	    fragShaderStageInfo.module = fragShaderModule;
	    fragShaderStageInfo.pName = "{{ fragmentEntryName }}";

	    VkPipelineShaderStageCreateInfo shaderStages[] = { vertShaderStageInfo, fragShaderStageInfo };

	    VkPipelineVertexInputStateCreateInfo vertexInputInfo{};
	    vertexInputInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;

	    auto bindingDescription = Vertex::getBindingDescription();
	    auto attributeDescriptions = Vertex::getAttributeDescriptions();

	    vertexInputInfo.vertexBindingDescriptionCount = 1;
	    vertexInputInfo.vertexAttributeDescriptionCount = static_cast<uint32_t>(attributeDescriptions.size());
	    vertexInputInfo.pVertexBindingDescriptions = &bindingDescription;
	    vertexInputInfo.pVertexAttributeDescriptions = attributeDescriptions.data();

	    VkPipelineViewportStateCreateInfo viewportState{};
	    viewportState.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
	    viewportState.viewportCount = 1;
	    viewportState.scissorCount = 1;

	    VkPipelineInputAssemblyStateCreateInfo inputAssembly{};
	    inputAssembly.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
	    inputAssembly.topology = {{ topologyOption }};
	    inputAssembly.primitiveRestartEnable = {{ primitiveRestart }};

	    VkPipelineRasterizationStateCreateInfo rasterizer{};
	    rasterizer.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
	    rasterizer.depthClampEnable = {{ depthClamp }};
	    rasterizer.rasterizerDiscardEnable = {{ rasterizerDiscard }};
	    rasterizer.polygonMode = {{ polygonMode }};
	    rasterizer.lineWidth = {{ lineWidth }};
	    rasterizer.cullMode = {{ cullMode }};
	    rasterizer.frontFace = {{ frontFace }};
	    rasterizer.depthBiasEnable = {{ depthBiasEnabled }};

	    VkPipelineMultisampleStateCreateInfo multisampling{};
	    multisampling.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
	    multisampling.sampleShadingEnable = {{ sampleShading }};
	    multisampling.rasterizationSamples = {{ rasterizationSamples }};

	    VkPipelineDepthStencilStateCreateInfo depthStencil{};
	    depthStencil.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
	    depthStencil.depthTestEnable = {{ depthTest }};
	    depthStencil.depthWriteEnable = {{ depthWrite }};
	    depthStencil.depthCompareOp = {{ depthCompareOp }};
	    depthStencil.depthBoundsTestEnable = {{ depthBoundTest }};
	    depthStencil.stencilTestEnable = {{ stencilTest }};

	    VkPipelineColorBlendAttachmentState colorBlendAttachment{};
	    colorBlendAttachment.colorWriteMask = {{ colorWriteMask }};

	    colorBlendAttachment.blendEnable = {{ blendEnable }};

	    VkPipelineColorBlendStateCreateInfo colorBlending{};
	    colorBlending.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
	    colorBlending.logicOpEnable = {{ logicOpEnable }};
	    colorBlending.logicOp = {{ logicOp }};
	    colorBlending.attachmentCount = {{ attachmentCount }};
	    colorBlending.pAttachments = &colorBlendAttachment;
	    colorBlending.blendConstants[0] = {{ blendConstants.0 }};
	    colorBlending.blendConstants[1] = {{ blendConstants.1 }};
	    colorBlending.blendConstants[2] = {{ blendConstants.2 }};
	    colorBlending.blendConstants[3] = {{ blendConstants.3 }};


	    std::vector<VkDynamicState> dynamicStates = {
	        VK_DYNAMIC_STATE_VIEWPORT,
	        VK_DYNAMIC_STATE_SCISSOR
	    };
	    VkPipelineDynamicStateCreateInfo dynamicState{};
	    dynamicState.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
	    dynamicState.dynamicStateCount = static_cast<uint32_t>(dynamicStates.size());
	    dynamicState.pDynamicStates = dynamicStates.data();

	    VkPipelineLayoutCreateInfo pipelineLayoutInfo{};
	    pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
	    pipelineLayoutInfo.setLayoutCount = 1;
	    pipelineLayoutInfo.pSetLayouts = &descriptorSetLayout;

	    if (vkCreatePipelineLayout(device, &pipelineLayoutInfo, nullptr, &graphicsPipeline.m_pipelineLayout) != VK_SUCCESS) {
	        throw std::runtime_error("failed to create pipeline layout!");
	    }

	    VkGraphicsPipelineCreateInfo pipelineInfo{};
	    pipelineInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
	    pipelineInfo.stageCount = 2;
	    pipelineInfo.pStages = shaderStages;
	    pipelineInfo.pVertexInputState = &vertexInputInfo;
	    pipelineInfo.pInputAssemblyState = &inputAssembly;
	    pipelineInfo.pViewportState = &viewportState;
	    pipelineInfo.pRasterizationState = &rasterizer;
	    pipelineInfo.pMultisampleState = &multisampling;
	    pipelineInfo.pDepthStencilState = &depthStencil;
	    pipelineInfo.pColorBlendState = &colorBlending;
	    pipelineInfo.pDynamicState = &dynamicState;
	    pipelineInfo.layout = graphicsPipeline.m_pipelineLayout;
	    pipelineInfo.renderPass = renderPass;
	    pipelineInfo.subpass = 0;
	    pipelineInfo.basePipelineHandle = VK_NULL_HANDLE;

	    if (vkCreateGraphicsPipelines(device, VK_NULL_HANDLE, 1, &pipelineInfo, nullptr, &graphicsPipeline.m_pipeline) != VK_SUCCESS) {
	        throw std::runtime_error("failed to create graphics pipeline!");
	    }

	    vkDestroyShaderModule(device, fragShaderModule, nullptr);
	    vkDestroyShaderModule(device, vertShaderModule, nullptr);
	}
};

int main() {
    VulkanTutorial tutorial;

    tutorial.run();

    return EXIT_SUCCESS;
}
